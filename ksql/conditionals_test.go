package ksql

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestBooleanExpression(t *testing.T) {
	tests := []struct {
		name     string
		left     Field
		right    any
		op       Op
		wantExpr string
		expectOK bool
	}{
		{
			name:     "Equal int",
			left:     F("schema.col"),
			right:    42,
			op:       equal,
			wantExpr: "schema.col = 42",
			expectOK: true,
		},
		{
			name:     "Equal string",
			left:     F("schema.col"),
			right:    "foo",
			op:       equal,
			wantExpr: "schema.col = 'foo'",
			expectOK: true,
		},
		{
			name:     "Equal nil",
			left:     F("schema.col"),
			right:    nil,
			op:       equal,
			wantExpr: "schema.col IS NULL",
			expectOK: true,
		},
		{
			name:     "Equal boolean true",
			left:     F("schema.col"),
			right:    true,
			op:       equal,
			wantExpr: "schema.col = TRUE",
			expectOK: true,
		},
		{
			name:     "Equal boolean false",
			left:     F("schema.col"),
			right:    false,
			op:       equal,
			wantExpr: "schema.col = FALSE",
			expectOK: true,
		},
		{
			name:     "Equal float",
			left:     F("schema.col"),
			right:    3.14,
			op:       equal,
			wantExpr: "schema.col = 3.14",
			expectOK: true,
		},
		{
			name:     "NotEqual string",
			left:     F("schema.col"),
			right:    "foo",
			op:       notEqual,
			wantExpr: "schema.col != 'foo'",
			expectOK: true,
		},
		{
			name:     "Greater float",
			left:     F("schema.col"),
			right:    3.14,
			op:       more,
			wantExpr: "schema.col > 3.14",
			expectOK: true,
		},
		{
			name:     "IsNull",
			left:     F("schema.col"),
			right:    nil,
			op:       isNull,
			wantExpr: "schema.col IS NULL",
			expectOK: true,
		},
		{
			name:     "In list",
			left:     F("schema.col"),
			right:    []int{1, 2, 3},
			op:       in,
			wantExpr: "schema.col IN (1, 2, 3)",
			expectOK: true,
		},
		{
			name:     "NotIn list",
			left:     F("schema.col"),
			right:    []string{"a", "b"},
			op:       notIn,
			wantExpr: "schema.col NOT IN ('a', 'b')",
			expectOK: true,
		},
		{
			name:     "Unsupported type",
			left:     F("schema.col"),
			right:    struct{}{},
			op:       equal,
			wantExpr: "", // depends on util.Serialize
			expectOK: false,
		},

		{
			name:     "Less int",
			left:     F("schema.col"),
			right:    10,
			op:       less,
			wantExpr: "schema.col < 10",
			expectOK: true,
		},
		{
			name:     "GreaterEq string",
			left:     F("schema.col"),
			right:    "bar",
			op:       moreEqual,
			wantExpr: "schema.col >= 'bar'",
			expectOK: true,
		},
		{
			name:     "LessEq float",
			left:     F("schema.col"),
			right:    2.71,
			op:       lessEqual,
			wantExpr: "schema.col <= 2.71",
			expectOK: true,
		},
		{
			name:     "IsNotNull",
			left:     F("schema.col"),
			right:    nil,
			op:       isNotNull,
			wantExpr: "schema.col IS NOT NULL",
			expectOK: true,
		},
		{
			name:     "In empty list",
			left:     F("schema.col"),
			right:    []int{},
			op:       in,
			wantExpr: "",
			expectOK: false,
		},
		{
			name:     "NotIn mixed types",
			left:     F("schema.col"),
			right:    []any{1, "a", true},
			op:       notIn,
			wantExpr: "schema.col NOT IN (1, 'a', TRUE)",
			expectOK: true,
		},

		{
			name:     "Greater int",
			left:     F("schema.col"),
			right:    100,
			op:       more,
			wantExpr: "schema.col > 100",
			expectOK: true,
		},
		{
			name:     "LessEq int",
			left:     F("schema.col"),
			right:    50,
			op:       lessEqual,
			wantExpr: "schema.col <= 50",
			expectOK: true,
		},
		{
			name:     "NotEqual float",
			left:     F("schema.col"),
			right:    1.23,
			op:       notEqual,
			wantExpr: "schema.col != 1.23",
			expectOK: true,
		},
		{
			name:     "In single element",
			left:     F("schema.col"),
			right:    []int{42},
			op:       in,
			wantExpr: "schema.col IN (42)",
			expectOK: true,
		},
		{
			name:     "NotIn single element",
			left:     F("schema.col"),
			right:    []string{"test"},
			op:       notIn,
			wantExpr: "schema.col NOT IN ('test')",
			expectOK: true,
		},
		{
			name:     "IsTrue",
			left:     F("schema.col"),
			right:    nil,
			op:       isTrue,
			wantExpr: "schema.col IS TRUE",
			expectOK: true,
		},
		{
			name:     "IsFalse",
			left:     F("schema.col"),
			right:    nil,
			op:       isFalse,
			wantExpr: "schema.col IS FALSE",
			expectOK: true,
		},
		{
			name:     "Empty string",
			left:     F("schema.col"),
			right:    "",
			op:       equal,
			wantExpr: "schema.col = ''",
			expectOK: true,
		},
		{
			name:     "Null in NotEqual",
			left:     F("schema.col"),
			right:    nil,
			op:       notEqual,
			wantExpr: "schema.col IS NOT NULL",
			expectOK: true,
		},
		{
			name:     "Unsupported slice type",
			left:     F("schema.col"),
			right:    []struct{}{{}},
			op:       in,
			wantExpr: "",
			expectOK: false,
		},
		{
			name:     "Empty Field",
			left:     F(""),
			right:    42,
			op:       equal,
			wantExpr: "",
			expectOK: false,
		},
		{
			name:     "GreaterEq int",
			left:     F("schema.col"),
			right:    10,
			op:       moreEqual,
			wantExpr: "schema.col >= 10",
			expectOK: true,
		},
		{
			name:     "Less string",
			left:     F("schema.col"),
			right:    "abc",
			op:       less,
			wantExpr: "schema.col < 'abc'",
			expectOK: true,
		},
		{
			name:     "Empty slice in IN",
			left:     F("schema.col"),
			right:    []string{},
			op:       in,
			wantExpr: "",
			expectOK: false,
		},
		{
			name:     "Empty slice in NOT IN",
			left:     F("schema.col"),
			right:    []string{},
			op:       notIn,
			wantExpr: "",
			expectOK: false,
		},
		{
			name:     "Boolean true in IN",
			left:     F("schema.col"),
			right:    []bool{true},
			op:       in,
			wantExpr: "schema.col IN (TRUE)",
			expectOK: true,
		},
		{
			name:     "Boolean false in NOT IN",
			left:     F("schema.col"),
			right:    []bool{false},
			op:       notIn,
			wantExpr: "schema.col NOT IN (FALSE)",
			expectOK: true,
		},
		{
			name:     "Float in IN",
			left:     F("schema.col"),
			right:    []float64{1.1, 2.2, 3.3},
			op:       in,
			wantExpr: "schema.col IN (1.1, 2.2, 3.3)",
			expectOK: true,
		},
		{
			name:     "Float in NOT IN",
			left:     F("schema.col"),
			right:    []float64{1.1, 2.2},
			op:       notIn,
			wantExpr: "schema.col NOT IN (1.1, 2.2)",
			expectOK: true,
		},
		{
			name:     "Null in IN",
			left:     F("schema.col"),
			right:    []any{nil},
			op:       in,
			wantExpr: "schema.col IN (NULL)",
			expectOK: true,
		},
		{
			name:     "Null in NOT IN",
			left:     F("schema.col"),
			right:    []any{nil},
			op:       notIn,
			wantExpr: "schema.col NOT IN (NULL)",
			expectOK: true,
		},
		{
			name:     "Mixed types in IN",
			left:     F("schema.col"),
			right:    []any{1, "a", true},
			op:       in,
			wantExpr: "schema.col IN (1, 'a', TRUE)",
			expectOK: true,
		},
		{
			name:     "Mixed types in NOT IN",
			left:     F("schema.col"),
			right:    []any{1, "b", false},
			op:       notIn,
			wantExpr: "schema.col NOT IN (1, 'b', FALSE)",
			expectOK: true,
		},
		{
			name:     "GreaterEq float",
			left:     F("schema.col"),
			right:    5.5,
			op:       moreEqual,
			wantExpr: "schema.col >= 5.5",
			expectOK: true,
		},
		{
			name:     "LessEq string",
			left:     F("schema.col"),
			right:    "xyz",
			op:       lessEqual,
			wantExpr: "schema.col <= 'xyz'",
			expectOK: true,
		},
		{
			name:     "Equal empty string",
			left:     F("schema.col"),
			right:    "",
			op:       equal,
			wantExpr: "schema.col = ''",
			expectOK: true,
		},
		{
			name:     "NotEqual empty string",
			left:     F("schema.col"),
			right:    "",
			op:       notEqual,
			wantExpr: "schema.col != ''",
			expectOK: true,
		},
		{
			name:     "GreaterEq boolean true",
			left:     F("schema.col"),
			right:    true,
			op:       moreEqual,
			wantExpr: "",
			expectOK: false,
		},
		{
			name:     "Less boolean false",
			left:     F("schema.col"),
			right:    false,
			op:       less,
			wantExpr: "",
			expectOK: false,
		},
		{
			name:     "Unsupported type in IN",
			left:     F("schema.col"),
			right:    []struct{}{{}},
			op:       in,
			wantExpr: "",
			expectOK: false,
		},
		{
			name:     "Empty Field",
			left:     F(""),
			right:    42,
			op:       equal,
			wantExpr: "",
			expectOK: false,
		},
		{
			name:     "Field without schema",
			left:     F("col"),
			right:    42,
			op:       equal,
			wantExpr: "col = 42",
			expectOK: true,
		},
		{
			name:     "Field with schema",
			left:     F("schema.col"),
			right:    42,
			op:       equal,
			wantExpr: "schema.col = 42",
			expectOK: true,
		},
		{
			name:     "Empty Field with schema",
			left:     F("schema."),
			right:    42,
			op:       equal,
			wantExpr: "",
			expectOK: false,
		},
		{
			name:     "Two fields comparison",
			left:     F("schema.col1"),
			right:    F("schema.col2"),
			op:       equal,
			wantExpr: "schema.col1 = schema.col2",
			expectOK: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			exp := NewBooleanExp(tt.left, tt.right, tt.op)
			got, ok := exp.Expression()
			assert.Equal(t, tt.expectOK, ok)
			if ok {
				assert.Equal(t, tt.wantExpr, got)
			}
		})
	}
}
